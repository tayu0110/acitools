use crate::{bgp, eqpt, l1, lldp, uribv4, uribv6, AciObject, EndpointScheme};
use serde::{Deserialize, Serialize};

#[derive(Debug, Clone, Deserialize, Serialize)]
#[serde(rename_all = "camelCase")]
pub struct Attributes {
    address: String,
    bootstrap_state: String,
    child_action: String,
    cluster_time_diff: String,
    config_issues: String,
    #[serde(rename = "controlPlaneMTU")]
    control_plane_mtu: String,
    current_time: String,
    #[serde(default)]
    dn: String,
    enforce_subnet_check: String,
    etep_addr: String,
    fabric_domain: String,
    fabric_id: String,
    #[serde(rename = "fabricMAC")]
    fabric_mac: String,
    id: String,
    inb_mgmt_addr: String,
    inb_mgmt_addr6: String,
    inb_mgmt_addr6_mask: String,
    inb_mgmt_addr_mask: String,
    inb_mgmt_gateway: String,
    inb_mgmt_gateway6: String,
    last_reboot_time: String,
    last_reset_reason: String,
    lc_own: String,
    mod_ts: String,
    mode: String,
    #[allow(dead_code)]
    #[serde(skip_serializing, default)]
    mon_pol_dn: String,
    name: String,
    name_alias: String,
    node_type: String,
    oob_mgmt_addr: String,
    oob_mgmt_addr6: String,
    oob_mgmt_addr6_mask: String,
    oob_mgmt_addr_mask: String,
    oob_mgmt_gateway: String,
    oob_mgmt_gateway6: String,
    pod_id: String,
    remote_network_id: String,
    remote_node: String,
    rl_oper_pod_id: String,
    rl_routable_mode: String,
    rldirect_mode: String,
    role: String,
    serial: String,
    server_type: String,
    site_id: String,
    state: String,
    status: String,
    system_up_time: String,
    tep_pool: String,
    unicast_xr_ep_learn_disable: String,
    version: String,
    virtual_mode: String,
}

#[derive(Debug, Clone, Deserialize, Serialize)]
#[serde(rename_all = "camelCase")]
pub enum ChildItem {
    AaaCtrlrFipsState {},
    AaaFipsState {},
    AcEntity {},
    AclEntity {},
    AclcapProv {},
    ActionLCont {},
    ActrlEntity {},
    ActrlcapProv {},
    AentpEntity {},
    AibEntity {},
    AnalyticsEntity {},
    AnalyticsHwTelemetry {},
    ArpEntity {},
    BdEnforceExpCont {},
    BfdEntity {},
    BgpEntity(bgp::entity::BgpEntity),
    CapCat {},
    CdpEntity {},
    CertEntity {},
    CloudController {},
    CloudsecEntity {},
    CnwAggrIf {},
    CnwPhysIf {},
    CommRLTepInfo {},
    CommSshInst {},
    CommTelnetInst {},
    CompatSuppFw {},
    ConfigprofileCatalog {},
    CoopEntity {},
    CoppEntity {},
    CpinfraEntity {},
    DatetimeClkPol {},
    DatetimeNtpq {},
    DhcpEntity {},
    DnsEntity {},
    Dot1xEntity {},
    Dot1xNic {},
    DppEntity {},
    EigrpEntity {},
    EqptCh(eqpt::chassis::EqptCh),
    EqptEntity {},
    EqptExtCh {},
    EqptFeatureEx {},
    EqptReloadSwitch {},
    EqptcapacityEntity {},
    EqptdiagEntity {},
    EthpmEntity {},
    FabrgmEntity {},
    FabricDecommission {},
    FabricLeafNodeRole {},
    FabricMMUpgrader {},
    FabricNodeHealth15min {},
    FabricNodeHealth1d {},
    FabricNodeHealth1h {},
    FabricNodeHealth1mo {},
    FabricNodeHealth1qtr {},
    FabricNodeHealth1w {},
    FabricNodeHealth1year {},
    FabricNodeHealth5min {},
    FabricNodeHealthHist15min {},
    FabricNodeHealthHist1d {},
    FabricNodeHealthHist1h {},
    FabricNodeHealthHist1mo {},
    FabricNodeHealthHist1qtr {},
    FabricNodeHealthHist1w {},
    FabricNodeHealthHist1year {},
    FabricNodeHealthHist5min {},
    FabricRemoteLeafNodeRole {},
    FabricSpineNodeRole {},
    FabricSystemInfo {},
    FaultCounts {},
    FaultInst {},
    FcEntity {},
    FcoeEntity {},
    FcpmEntity {},
    FhsEntity {},
    FirmwareCatFwStatusCont {},
    FirmwareCtrlrFwStatusCont {},
    FirmwareFwStatusCont {},
    FvEpNs {},
    FvFltCounter15min {},
    FvFltCounter1d {},
    FvFltCounter1h {},
    FvFltCounter1mo {},
    FvFltCounter1qtr {},
    FvFltCounter1w {},
    FvFltCounter1year {},
    FvFltCounter5min {},
    FvFltCounterHist15min {},
    FvFltCounterHist1d {},
    FvFltCounterHist1h {},
    FvFltCounterHist1mo {},
    FvFltCounterHist1qtr {},
    FvFltCounterHist1w {},
    FvFltCounterHist1year {},
    FvFltCounterHist5min {},
    FvIfConnOper {},
    FvImplicitStaleEpCont {},
    FvStaleTunEpCont {},
    GleanEntity {},
    HealthInst {},
    HsrpEntity {},
    Icmpv4Entity {},
    Icmpv6Entity {},
    IgmpEntity {},
    IgmpsnoopEntity {},
    ImEntity {},
    InfrasecEntity {},
    IpagectrlEntity {},
    IpsecEntity {},
    Ipv4Entity {},
    Ipv6Entity {},
    IsisEntity {},
    L1PhysIf(l1::physif::L1PhysIf),
    L1capProv {},
    L2BrIf {},
    L2ExtIf {},
    L2InbandIf {},
    L2capProv {},
    L3Ctx {},
    L3CtxSubstitute {},
    L3Inst {},
    L3capProv {},
    L3vmEntity {},
    LacpEntity {},
    LeqptLooseNode {},
    LicenseEntity {},
    LldpEntity(lldp::entity::LldpEntity),
    MacsecEntity {},
    McpEntity {},
    MgmtMgmtIf {},
    MldEntity {},
    MldsnoopEntity {},
    MockMockRoot {},
    MonitorEntity {},
    MpLocalfabric {},
    MpSite {},
    MplsEntity {},
    MribEntity {},
    MultidomainInternalCtxInfo {},
    MultidomainMultiDomainIps {},
    MultidomainMultiDomainVnids {},
    NatEntity {},
    NdEntity {},
    NpvEntity {},
    NwConnGrp {},
    NwVdc {},
    OpflexODevCmdReq {},
    OpflexODevCmdResp {},
    OpflexODevRefCont {},
    OpflexOeHupTrigger {},
    OpflexPodInfo {},
    OpflexVtepRefCont {},
    OpflexpHupTrigger {},
    OpflexpPolicyResolveReq {},
    OpflexpReference {},
    OpflexpReportedEpReg {},
    OpflexpReportedRouteReg {},
    OspfEntity {},
    Ospfv3Entity {},
    PatchingEntity {},
    PcAggrIf {},
    PcEntity {},
    PcFcEntity {},
    PconsBootStrapTracking {},
    Pim6Entity {},
    PimCapability {},
    PimEntity {},
    PkiFabricSelfCACertsModified {},
    PlatformmgrPlmgrTrig {},
    PoeEntity {},
    PoeNic {},
    ProcContainer {},
    ProcEntity {},
    // what is this???
    ProcMemory(serde_json::Value),
    ProcSystem {},
    PtpEntity {},
    QosmEntity {},
    RadiusEntity {},
    RegressIf {},
    RlpodredRlPodRedPolicy {},
    RlpodredRlSwitchoverPod {},
    RpmEntity {},
    RpmMmode {},
    SatmEntity {},
    SegrtEntity {},
    SlaEntity {},
    SlowdrainEntity {},
    SmmEntity {},
    SnmpEntity {},
    SpanAcct {},
    SpanEntity {},
    SpanRetryCont {},
    StatsprefCont {},
    StpEntity {},
    StsEntity {},
    SvccopyEntity {},
    SvcredirEntity {},
    SynceEntity {},
    SyntheticSwTLTestObj {},
    SysdebugCoreFileRepository {},
    SysdebugEp {},
    SysdebugTechSupFileRepository {},
    SyslogAcct {},
    SysmgrEntity {},
    TelemetryCapabilityCont {},
    TelemetryEntity {},
    TelemetryInst {},
    TopRsMonPolSystemPolCons {},
    TopRsNeighFw {},
    TopRsProtGFw {},
    TopRsSysBfdIpv4PolCons {},
    TopRsSysBfdIpv6PolCons {},
    TopRsSysCdpInstPolCons {},
    TopRsSysErrDisRecoverPolCons {},
    TopRsSysFastLinkFailoverInstPolCons {},
    TopRsSysFcFabricPolCons {},
    TopRsSysFcInstPolCons {},
    TopRsSysFlashConfigPolCons {},
    TopRsSysFwdScaleProfPolCons {},
    TopRsSysIaclProfilePolCons {},
    TopRsSysL2NodePolAuthCons {},
    TopRsSysLldpInstPolCons {},
    TopRsSysMcpInstPolCons {},
    TopRsSysMstInstPolCons {},
    TopRsSysNetflowNodePolCons {},
    TopRsSysPoeInstPolCons {},
    TopRsSysPsuInstPolCons {},
    TopRsSysPtpInstPolCons {},
    TopRsSysSynceInstPolCons {},
    TopRsSystemRack {},
    TopRsSysUsbConfigProfilePolCons {},
    TopRtExporterToTopSystem {},
    TopRtFwinstlsrc {},
    TopRtTrDst {},
    TopRtTrSrc {},
    TopRtTsSrc {},
    TopoctrlEntity {},
    TrackEntity {},
    TunnelIf {},
    TwampEntity {},
    UdldEntity {},
    UnifiedportsEntity {},
    Uribv4Entity(uribv4::entity::Uribv4Entity),
    Uribv6Entity(uribv6::entity::Uribv6Entity),
    UsrcallhomeRecord {},
    UsrsyslogRecord {},
    VethEntity {},
    VlanmgrEntity {},
    VpcEntity {},
    VsanmgrEntity {},
    WwnEntity {},
}

#[derive(Debug, Clone, Copy)]
pub enum TopSystemEndpoint {
    ClassAll,
    ClassPod { pod: u32 },
    ClassNode { pod: u32, node: u32 },
}

impl EndpointScheme for TopSystemEndpoint {
    fn endpoint(&self) -> std::borrow::Cow<'_, str> {
        match self {
            Self::ClassAll => std::borrow::Cow::Borrowed("node/class/topSystem.json"),
            Self::ClassPod { pod } => {
                std::borrow::Cow::Owned(format!("node/class/topology/pod-{pod}/topSystem.json"))
            }
            Self::ClassNode { pod, node } => std::borrow::Cow::Owned(format!(
                "node/class/topology/pod-{pod}/node-{node}/topSystem.json"
            )),
        }
    }
}

pub type TopSystem = AciObject<__internal::TopSystem>;

mod __internal {
    use super::*;
    use crate::AciObjectScheme;

    #[derive(Debug, Clone, Copy)]
    pub struct TopSystem;

    impl AciObjectScheme for TopSystem {
        type Attributes = Attributes;
        type ChildItem = ChildItem;
        type Endpoint = TopSystemEndpoint;
        const CLASS_NAME: &'static str = "topSystem";
    }
}
